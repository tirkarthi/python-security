{
    "Modified": "2016-12-15T08:30:37.980000",
    "Published": "2016-06-30T13:59:04",
    "access": {
        "authentication": "NONE",
        "complexity": "MEDIUM",
        "vector": "NETWORK"
    },
    "capec": [
        {
            "id": "10",
            "name": "Buffer Overflow via Environment Variables",
            "prerequisites": "The application uses environment variables.\nAn environment variable exposed to the user is vulnerable to a buffer overflow.\nThe vulnerable environment variable uses untrusted data.\nTainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.",
            "related_weakness": [
                "120",
                "302",
                "118",
                "119",
                "74",
                "99",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Do not expose environment variable to the user.\nDo not use untrusted data in your environment variables.\nUse a language or compiler that performs automatic bounds checking\nThere are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.",
            "summary": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables."
        },
        {
            "id": "100",
            "name": "Overflow Buffers",
            "prerequisites": "Targeted software performs buffer operations.\nTargeted software inadequately performs bounds-checking on buffer operations.\nAttacker has the capability to influence the input to buffer operations.",
            "related_weakness": [
                "120",
                "119",
                "131",
                "129",
                "805",
                "19",
                "680"
            ],
            "solutions": "Use a language or compiler that performs automatic bounds checking.\nUse secure functions not vulnerable to buffer overflow.\nIf you have to use dangerous functions, make sure that you do boundary checking.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.\nUtilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.",
            "summary": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers' choice."
        },
        {
            "id": "14",
            "name": "Client-side Injection-induced Buffer Overflow",
            "prerequisites": "The targeted client software communicates with an external server.\nThe targeted client software has a buffer overflow vulnerability.",
            "related_weakness": [
                "120",
                "353",
                "118",
                "119",
                "74",
                "20",
                "680",
                "697",
                "713"
            ],
            "solutions": "The client software should not install untrusted code from a non-authenticated server.\nThe client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.\nPerform input validation for length of buffer inputs.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nEnsure all buffer uses are consistently bounds-checked.\nUse OS-level preventative functionality. Not a complete solution.",
            "summary": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service."
        },
        {
            "id": "24",
            "name": "Filter Failure through Buffer Overflow",
            "prerequisites": "Ability to control the length of data passed to an active filter.",
            "related_weakness": [
                "120",
                "119",
                "118",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nPre-design: Use a language or compiler that performs automatic bounds checking.\nPre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nOperational: Use OS-level preventative functionality. Not a complete solution.\nDesign: Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "summary": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered)."
        },
        {
            "id": "42",
            "name": "MIME Conversion",
            "prerequisites": "The target system uses a mail server.\nMail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.",
            "related_weakness": [
                "120",
                "119",
                "74",
                "20"
            ],
            "solutions": "Stay up to date with third party vendor patches\nFrom \"Exploiting Software\", please see reference below.\nUse the sendmail restricted shell program (smrsh)\nUse mail.local",
            "summary": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back."
        },
        {
            "id": "44",
            "name": "Overflow Binary Resource File",
            "prerequisites": "Target software processes binary resource files.\nTarget software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file.",
            "related_weakness": [
                "120",
                "119",
                "697",
                "713"
            ],
            "solutions": "Perform appropriate bounds checking on all buffers.\nDesign: Enforce principle of least privilege\nDesign: Static code analysis\nImplementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes\nImplementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host.",
            "summary": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow."
        },
        {
            "id": "45",
            "name": "Buffer Overflow via Symbolic Links",
            "prerequisites": "The attacker can create symbolic link on the target host.\nThe target host does not perform correct boundary checking while consuming data from a resources.",
            "related_weakness": [
                "120",
                "285",
                "302",
                "118",
                "119",
                "74",
                "20",
                "680",
                "697"
            ],
            "solutions": "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.\nBecause Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.\nPay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.\nAlways check the size of the input data before copying to a buffer.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.",
            "summary": "This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking."
        },
        {
            "id": "46",
            "name": "Overflow Variables and Tags",
            "prerequisites": "The target program consumes user-controllable data in the form of tags or variables.\nThe target program does not perform sufficient boundary checking.",
            "related_weakness": [
                "120",
                "118",
                "119",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Use a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.\nDo not trust input data from user. Validate all user input.",
            "summary": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow."
        },
        {
            "id": "47",
            "name": "Buffer Overflow via Parameter Expansion",
            "prerequisites": "The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.\nThe expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).",
            "related_weakness": [
                "120",
                "119",
                "118",
                "130",
                "131",
                "74",
                "20",
                "680",
                "697"
            ],
            "solutions": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
            "summary": "In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow."
        },
        {
            "id": "8",
            "name": "Buffer Overflow in an API Call",
            "prerequisites": "The target host exposes an API to the user.\nOne or more API functions exposed by the target host has a buffer overflow vulnerability.",
            "related_weakness": [
                "120",
                "119",
                "118",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Use a language or compiler that performs automatic bounds checking.\nUse secure functions not vulnerable to buffer overflow.\nIf you have to use dangerous functions, make sure that you do boundary checking.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nUse OS-level preventative functionality. Not a complete solution.",
            "summary": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process."
        },
        {
            "id": "9",
            "name": "Buffer Overflow in Local Command-Line Utilities",
            "prerequisites": "The target host exposes a command-line utility to the user.\nThe command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.",
            "related_weakness": [
                "120",
                "118",
                "119",
                "74",
                "20",
                "680",
                "733",
                "697"
            ],
            "solutions": "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nOperational: Use OS-level preventative functionality. Not a complete solution.\nApply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nDo not unnecessarily expose services.",
            "summary": "This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root."
        }
    ],
    "cvss": "6.8",
    "cvss-time": "2016-12-15T07:10:32.297000",
    "cwe": "CWE-119",
    "id": "CVE-2016-4472",
    "impact": {
        "availability": "PARTIAL",
        "confidentiality": "PARTIAL",
        "integrity": "PARTIAL"
    },
    "last-modified": "2017-11-02T21:29:02.997000",
    "nessus": [
        {
            "NASL family": "MacOS X Local Security Checks",
            "NASL id": "MACOS_ITUNES_12_6.NASL",
            "description": "The version of Apple iTunes installed on the remote macOS or Mac OS X host is prior to 12.6. It is, therefore, affected by multiple vulnerabilities :\n\n  - Multiple vulnerabilities exist in the expat component,     the most severe of which are remote code execution     vulnerabilities. An unauthenticated, remote attacker can     exploit these vulnerabilities to cause a denial of     service condition or the execution of arbitrary code in     the context of the current user. (CVE-2009-3270,     CVE-2009-3560, CVE-2009-3720, CVE-2012-1147,     CVE-2012-1148, CVE-2012-6702, CVE-2015-1283,     CVE-2016-0718, CVE-2016-4472, CVE-2016-5300)\n\n  - Multiple vulnerabilities exist in the SQLite component,     the most severe of which are remote code execution     vulnerabilities. An unauthenticated, remote attacker can     exploit these vulnerabilities by convincing a user to     open a specially crafted file, to cause a denial of     service condition or the execution of arbitrary code in     the context of the current user. (CVE-2013-7443,     CVE-2015-3414, CVE-2015-3415, CVE-2015-3416,     CVE-2015-3717, CVE-2015-6607, CVE-2016-6153)\n\nNote that Nessus has not tested for these issues but has instead relied only on the application's self-reported version number.",
            "last seen": "2019-02-21",
            "modified": "2018-07-14",
            "plugin id": "100027",
            "published": "2017-05-08",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=100027",
            "title": "Apple iTunes < 12.6 Multiple Vulnerabilities (macOS) (credentialed check)"
        },
        {
            "NASL family": "Gentoo Local Security Checks",
            "NASL id": "GENTOO_GLSA-201701-21.NASL",
            "description": "The remote host is affected by the vulnerability described in GLSA-201701-21 (Expat: Multiple vulnerabilities)\n\n    Multiple vulnerabilities have been discovered in Expat. Please review       the CVE identifiers referenced below for details.\n  Impact :\n\n    A remote attacker, by enticing a user to process a specially crafted XML       file, could execute arbitrary code with the privileges of the process or       cause a Denial of Service condition.  This attack could also be used       against automated systems that arbitrarily process XML files.\n  Workaround :\n\n    There is no known workaround at this time.",
            "last seen": "2019-02-21",
            "modified": "2017-01-12",
            "plugin id": "96415",
            "published": "2017-01-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=96415",
            "title": "GLSA-201701-21 : Expat: Multiple vulnerabilities"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_FF76F0E03F1111E6B3C814DAE9D210B8.NASL",
            "description": "Adam Maris reports :\n\nIt was found that original patch for issues CVE-2015-1283 and CVE-2015-2716 used overflow checks that could be optimized out by some compilers applying certain optimization settings, which can cause the vulnerability to remain even after applying the patch.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "91913",
            "published": "2016-07-01",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=91913",
            "title": "FreeBSD : expat2 -- denial of service (ff76f0e0-3f11-11e6-b3c8-14dae9d210b8)"
        },
        {
            "NASL family": "Peer-To-Peer File Sharing",
            "NASL id": "ITUNES_12_6_BANNER.NASL",
            "description": "The version of Apple iTunes running on the remote host is prior to 12.6. It is, therefore, affected by multiple vulnerabilities :\n\n  - Multiple vulnerabilities exist in the expat component,     the most severe of which are remote code execution     vulnerabilities. An unauthenticated, remote attacker can     exploit these vulnerabilities to cause a denial of     service condition or the execution of arbitrary code in     the context of the current user. (CVE-2009-3270,     CVE-2009-3560, CVE-2009-3720, CVE-2012-1147,     CVE-2012-1148, CVE-2012-6702, CVE-2015-1283,     CVE-2016-0718, CVE-2016-4472, CVE-2016-5300)\n\n  - Multiple vulnerabilities exist in the SQLite component,     the most severe of which are remote code execution     vulnerabilities. An unauthenticated, remote attacker can     exploit these vulnerabilities by convincing a user to     open a specially crafted file, to cause a denial of     service condition or the execution of arbitrary code in     the context of the current user. (CVE-2013-7443,     CVE-2015-3414, CVE-2015-3415, CVE-2015-3416,     CVE-2015-3717, CVE-2015-6607, CVE-2016-6153)\n\n  - An information disclosure vulnerability exists in the     APNs server component due to client certificates being     transmitted in cleartext. A man-in-the-middle attacker     can exploit this to disclose sensitive information.\n    (CVE-2017-2383)\n\n  - A use-after-free error exists in the WebKit component     due to improper handling of RenderBox objects. An     unauthenticated, remote attacker can exploit this to     execute arbitrary code. (CVE-2017-2463)\n\n  - Multiple universal cross-site scripting (XSS)     vulnerabilities exist in the WebKit component due to     improper validation of user-supplied input. An     unauthenticated, remote attacker can exploit these     vulnerabilities, by convincing a user to visit a     specially crafted web page, to execute arbitrary script     code in a user's browser session. (CVE-2017-2479,     CVE-2017-2480, CVE-2017-2493)\n\n  - An integer overflow condition exists in the libxslt     component in the xsltAddTextString() function in     transform.c due to improper validation of user-supplied     input. An unauthenticated, remote attacker can exploit     this to cause an out-of-bounds write, resulting in the     execution of arbitrary code. (CVE-2017-5029)\n\nNote that Nessus has not tested for these issues but has instead relied only on the application's self-reported version number.",
            "last seen": "2019-02-21",
            "modified": "2018-07-12",
            "plugin id": "100026",
            "published": "2017-05-08",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=100026",
            "title": "Apple iTunes < 12.6 Multiple Vulnerabilities (uncredentialed check)"
        },
        {
            "NASL family": "Slackware Local Security Checks",
            "NASL id": "SLACKWARE_SSA_2017-266-02.NASL",
            "description": "New python packages are available for Slackware 14.0, 14.1, 14.2, and\n-current to fix a security issue.",
            "last seen": "2018-09-01",
            "modified": "2017-09-25",
            "plugin id": "103424",
            "published": "2017-09-25",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=103424",
            "title": "Slackware 14.0 / 14.1 / 14.2 / current : python (SSA:2017-266-02)"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_8719B9358BAE41AD92BA3C826F651219.NASL",
            "description": "python release notes :\n\nMultiple vulnerabilities has been fixed in this release. Please refer to the CVE list for details.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "109594",
            "published": "2018-05-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=109594",
            "title": "FreeBSD : python 2.7 -- multiple vulnerabilities (8719b935-8bae-41ad-92ba-3c826f651219)"
        },
        {
            "NASL family": "Slackware Local Security Checks",
            "NASL id": "SLACKWARE_SSA_2018-124-01.NASL",
            "description": "New python packages are available for Slackware 14.0, 14.1, 14.2, and\n-current to fix security issues.",
            "last seen": "2018-09-02",
            "modified": "2018-05-07",
            "plugin id": "109583",
            "published": "2018-05-07",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=109583",
            "title": "Slackware 14.0 / 14.1 / 14.2 / current : python (SSA:2018-124-01)"
        },
        {
            "NASL family": "Windows",
            "NASL id": "ITUNES_12_6.NASL",
            "description": "The version of Apple iTunes installed on the remote Windows host is prior to 12.6. It is, therefore, affected by multiple vulnerabilities :\n\n  - Multiple vulnerabilities exist in the expat component,     the most severe of which are remote code execution     vulnerabilities. An unauthenticated, remote attacker can     exploit these vulnerabilities to cause a denial of     service condition or the execution of arbitrary code in     the context of the current user. (CVE-2009-3270,     CVE-2009-3560, CVE-2009-3720, CVE-2012-1147,     CVE-2012-1148, CVE-2012-6702, CVE-2015-1283,     CVE-2016-0718, CVE-2016-4472, CVE-2016-5300)\n\n  - Multiple vulnerabilities exist in the SQLite component,     the most severe of which are remote code execution     vulnerabilities. An unauthenticated, remote attacker can     exploit these vulnerabilities by convincing a user to     open a specially crafted file, to cause a denial of     service condition or the execution of arbitrary code in     the context of the current user. (CVE-2013-7443,     CVE-2015-3414, CVE-2015-3415, CVE-2015-3416,     CVE-2015-3717, CVE-2015-6607, CVE-2016-6153)\n\n  - An information disclosure vulnerability exists in the     APNs server component due to client certificates being     transmitted in cleartext. A man-in-the-middle attacker     can exploit this to disclose sensitive information.\n    (CVE-2017-2383)\n\n  - A use-after-free error exists in the WebKit component     due to improper handling of RenderBox objects. An     unauthenticated, remote attacker can exploit this to     execute arbitrary code. (CVE-2017-2463)\n\n  - Multiple universal cross-site scripting (XSS)     vulnerabilities exist in the WebKit component due to     improper validation of user-supplied input. An     unauthenticated, remote attacker can exploit these     vulnerabilities, by convincing a user to visit a     specially crafted web page, to execute arbitrary script     code in a user's browser session. (CVE-2017-2479,     CVE-2017-2480, CVE-2017-2493)\n\n  - An integer overflow condition exists in the libxslt     component in the xsltAddTextString() function in     transform.c due to improper validation of user-supplied     input. An unauthenticated, remote attacker can exploit     this to cause an out-of-bounds write, resulting in the     execution of arbitrary code. (CVE-2017-5029)\n\nNote that Nessus has not tested for these issues but has instead relied only on the application's self-reported version number.",
            "last seen": "2019-02-21",
            "modified": "2018-07-12",
            "plugin id": "100025",
            "published": "2017-05-08",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=100025",
            "title": "Apple iTunes < 12.6 Multiple Vulnerabilities (credentialed check)"
        },
        {
            "NASL family": "Debian Local Security Checks",
            "NASL id": "DEBIAN_DSA-3582.NASL",
            "description": "Gustavo Grieco discovered that Expat, an XML parsing C library, does not properly handle certain kinds of malformed input documents, resulting in buffer overflows during processing and error reporting. A remote attacker can take advantage of this flaw to cause an application using the Expat library to crash, or potentially, to execute arbitrary code with the privileges of the user running the application.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "91200",
            "published": "2016-05-18",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=91200",
            "title": "Debian DSA-3582-1 : expat - security update"
        },
        {
            "NASL family": "FreeBSD Local Security Checks",
            "NASL id": "FREEBSD_PKG_9164F51EAE2011E7A633009C02A2AB30.NASL",
            "description": "Python reports :\n\nMultiple vulnerabilities have been fixed in Python 2.7.14. Please refer to the CVE list for details.",
            "last seen": "2019-02-21",
            "modified": "2018-11-10",
            "plugin id": "103796",
            "published": "2017-10-12",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=103796",
            "title": "FreeBSD : Python 2.7 -- multiple vulnerabilities (9164f51e-ae20-11e7-a633-009c02a2ab30)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-60889583AB.NASL",
            "description": "Security fixes for CVE-2016-4472, CVE-2016-5300, CVE-2016-0718 and CVE-2012-6702.\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92102",
            "published": "2016-07-14",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92102",
            "title": "Fedora 23 : expat (2016-60889583ab)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-7C6E7A9265.NASL",
            "description": "Security fixes for CVE-2016-4472, CVE-2016-5300, CVE-2016-0718 and CVE-2012-6702.\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92117",
            "published": "2016-07-14",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92117",
            "title": "Fedora 24 : expat (2016-7c6e7a9265)"
        },
        {
            "NASL family": "Slackware Local Security Checks",
            "NASL id": "SLACKWARE_SSA_2016-359-01.NASL",
            "description": "New expat packages are available for Slackware 13.0, 13.1, 13.37, 14.0, 14.1, 14.2, and -current to fix security issues.",
            "last seen": "2019-02-21",
            "modified": "2017-09-21",
            "plugin id": "96092",
            "published": "2016-12-27",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=96092",
            "title": "Slackware 13.0 / 13.1 / 13.37 / 14.0 / 14.1 / 14.2 / current : expat (SSA:2016-359-01)"
        },
        {
            "NASL family": "Fedora Local Security Checks",
            "NASL id": "FEDORA_2016-0FD6CA526A.NASL",
            "description": "Security fixes for CVE-2016-4472, CVE-2016-5300, CVE-2016-0718 and CVE-2012-6702.\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Fedora update system website.\nTenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2016-10-18",
            "plugin id": "92229",
            "published": "2016-07-15",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=92229",
            "title": "Fedora 22 : expat (2016-0fd6ca526a)"
        },
        {
            "NASL family": "Ubuntu Local Security Checks",
            "NASL id": "UBUNTU_USN-3013-1.NASL",
            "description": "It was discovered that the Expat code in XML-RPC for C and C++ unexpectedly called srand in certain circumstances. This could reduce the security of calling applications. (CVE-2012-6702)\n\nIt was discovered that the Expat code in XML-RPC for C and C++ incorrectly handled seeding the random number generator. A remote attacker could possibly use this issue to cause a denial of service.\n(CVE-2016-5300)\n\nGustavo Grieco discovered that the Expat code in XML-RPC for C and C++ incorrectly handled malformed XML data. If a user or application linked against XML-RPC for C and C++ were tricked into opening a crafted XML file, an attacker could cause a denial of service, or possibly execute arbitrary code. (CVE-2016-0718)\n\nIt was discovered that the Expat code in XML-RPC for C and C++ incorrectly handled malformed XML data. If a user or application linked against XML-RPC for C and C++ were tricked into opening a crafted XML file, an attacker could cause a denial of service, or possibly execute arbitrary code. (CVE-2015-1283, CVE-2016-4472).\n\nNote that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues.",
            "last seen": "2019-02-21",
            "modified": "2018-12-01",
            "plugin id": "91729",
            "published": "2016-06-21",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=91729",
            "title": "Ubuntu 12.04 LTS : xmlrpc-c vulnerabilities (USN-3013-1)"
        },
        {
            "NASL family": "Misc.",
            "NASL id": "PVS_5_2_0.NASL",
            "description": "The version of Tenable Passive Vulnerability Scanner (PVS) installed on the remote host is 5.x < 5.2.0. It is, therefore, affected by multiple vulnerabilities :\n\n  - Multiple denial of service vulnerabilities exist in     Expat within file xmlparse.c due to a logical error in     hash computations. An unauthenticated, remote attacker     can exploit these, via a specially crafted XML file     containing many identifiers with the same value, to     cause the service to exhaust CPU resources.\n    (CVE-2012-0876, CVE-2016-5300)\n\n  - A flaw exists in the generate_hash_secret_salt()     function in file lib/xmlparse.c within Expat due to the     generation of non-random output by the PRNG. An     unauthenticated, remote attacker can exploit this to     more easily predict the PRNG output. (CVE-2012-6702)\n\n  - Multiple buffer overflow conditions exist within Expat,     specifically in the XML_GetBuffer() function in file     lib/xmlparse.c, due to improper validation of     user-supplied input when handling compressed XML     content. An unauthenticated, remote attacker can exploit     these to execute arbitrary code. (CVE-2015-1283,     CVE-2016-4472)\n\n  - Multiple buffer overflow conditions exist within the     Expat XML parser when handling malformed input documents     due to improper validation of user-supplied input. An     unauthenticated, remote attacker can exploit these to     cause a denial of service condition or the execution of     arbitrary code. (CVE-2016-0718, CVE-2016-0719)\n\n  - Multiple integer overflow conditions exist in s3_srvr.c,     ssl_sess.c, and t1_lib.c due to improper use of pointer     arithmetic for heap-buffer boundary checks. An     unauthenticated, remote attacker can exploit these to     cause a denial of service. (CVE-2016-2177)\n\n  - An information disclosure vulnerability exists in the     dsa_sign_setup() function in dsa_ossl.c due to a failure     to properly ensure the use of constant-time operations.\n    An unauthenticated, remote attacker can exploit this,     via a timing side-channel attack, to disclose DSA key     information. (CVE-2016-2178)\n\n  - A denial of service vulnerability exists in the DTLS     implementation due to a failure to properly restrict the     lifetime of queue entries associated with unused     out-of-order messages. An unauthenticated, remote     attacker can exploit this, by maintaining multiple     crafted DTLS sessions simultaneously, to exhaust memory.\n    (CVE-2016-2179)\n\n  - An out-of-bounds read error exists in the X.509 Public     Key Infrastructure Time-Stamp Protocol (TSP)     implementation. An unauthenticated, remote attacker can     exploit this, via a crafted time-stamp file that is     mishandled by the 'openssl ts' command, to cause     denial of service or to disclose sensitive information.\n    (CVE-2016-2180)\n\n  - A denial of service vulnerability exists in the     Anti-Replay feature in the DTLS implementation due to     improper handling of epoch sequence numbers in records.\n    An unauthenticated, remote attacker can exploit this,     via spoofed DTLS records, to cause legitimate packets to     be dropped. (CVE-2016-2181)\n\n  - An overflow condition exists in the BN_bn2dec() function     in bn_print.c due to improper validation of     user-supplied input when handling BIGNUM values. An     unauthenticated, remote attacker can exploit this to     crash the process. (CVE-2016-2182)\n\n  - A vulnerability exists, known as SWEET32, in the 3DES     and Blowfish algorithms due to the use of weak 64-bit     block ciphers by default. A man-in-the-middle attacker     who has sufficient resources can exploit this     vulnerability, via a 'birthday' attack, to detect a     collision that leaks the XOR between the fixed secret     and a known plaintext, allowing the disclosure of the     secret text, such as secure HTTPS cookies, and possibly     resulting in the hijacking of an authenticated session.\n    (CVE-2016-2183)\n\n  - A flaw exists in SQLite due to the use of insecure     temporary directories. A local attacker can exploit this     to cause a denial of service condition or possibly have     other more severe impact. (CVE-2016-6153)\n\n  - A flaw exists in the tls_decrypt_ticket() function in     t1_lib.c due to improper handling of ticket HMAC     digests. An unauthenticated, remote attacker can exploit     this, via a ticket that is too short, to crash the     process, resulting in a denial of service.\n    (CVE-2016-6302)\n\n  - An integer overflow condition exists in the     MDC2_Update() function in mdc2dgst.c due to improper     validation of user-supplied input. An unauthenticated,     remote attacker can exploit this to cause a heap-based     buffer overflow, resulting in a denial of service     condition or possibly the execution of arbitrary code.\n    (CVE-2016-6303)\n\n  - A flaw exists in the ssl_parse_clienthello_tlsext()     function in t1_lib.c due to improper handling of overly     large OCSP Status Request extensions from clients. An     unauthenticated, remote attacker can exploit this, via     large OCSP Status Request extensions, to exhaust memory     resources, resulting in a denial of service condition.\n    (CVE-2016-6304)\n\n  - A flaw exists in the SSL_peek() function in     rec_layer_s3.c due to improper handling of empty     records. An unauthenticated, remote attacker can exploit     this, by triggering a zero-length record in an SSL_peek     call, to cause an infinite loop, resulting in a denial     of service condition. (CVE-2016-6305)\n\n  - An out-of-bounds read error exists in the certificate     parser that allows an unauthenticated, remote attacker     to cause a denial of service via crafted certificate     operations. (CVE-2016-6306)\n\n  - A denial of service vulnerability exists in the     state-machine implementation due to a failure to check     for an excessive length before allocating memory. An     unauthenticated, remote attacker can exploit this, via a     crafted TLS message, to exhaust memory resources.\n    (CVE-2016-6307)\n\n  - A denial of service vulnerability exists in the DTLS     implementation due to improper handling of excessively     long DTLS messages. An unauthenticated, remote attacker     can exploit this, via a crafted DTLS message, to exhaust     available memory resources. (CVE-2016-6308)\n\n  - A remote code execution vulnerability exists in the     read_state_machine() function in statem.c due to     improper handling of messages larger than 16k. An     unauthenticated, remote attacker can exploit this, via a     specially crafted message, to cause a use-after-free     error, resulting in a denial of service condition or     possibly the execution of arbitrary code.\n    (CVE-2016-6309)\n\n  - A cross-site scripting (XSS) vulnerability exists within     the JQuery UI dialog() function due to improper     validation of input to the 'closeText' parameter before     returning it to users. An unauthenticated, remote     attacker can exploit this, via a specially crafted     request, to execute arbitrary script code in a user's     browser session. (CVE-2016-7103)\n\n  - A denial of service vulnerability exists in x509_vfy.c     due to improper handling of certificate revocation lists     (CRLs). An unauthenticated, remote attacker can exploit     this, via a specially crafted CRL, to cause a NULL     pointer dereference, resulting in a crash of the     service. (CVE-2016-7052)\n\n  - An unspecified cross-site scripting (XSS) vulnerability     exists in the web interface due to improper validation     of input before returning it to users. An     unauthenticated, remote attacker can exploit this, via a     specially crafted request, to execute arbitrary script     code in a user's browser session.",
            "last seen": "2019-02-21",
            "modified": "2019-01-02",
            "plugin id": "96337",
            "published": "2017-01-06",
            "reporter": "Tenable",
            "source": "https://www.tenable.com/plugins/index.php?view=single&id=96337",
            "title": "Tenable Passive Vulnerability Scanner 5.x < 5.2.0 Multiple Vulnerabilities (SWEET32)"
        }
    ],
    "ranking": [
        [
            {
                "circl": 3
            }
        ]
    ],
    "references": [
        "http://www.securityfocus.com/bid/91528",
        "http://www.ubuntu.com/usn/USN-3013-1",
        "https://bugzilla.redhat.com/show_bug.cgi?id=1344251",
        "https://security.gentoo.org/glsa/201701-21",
        "https://sourceforge.net/p/expat/code_git/ci/f0bec73b018caa07d3e75ec8dd967f3785d71bde",
        "https://www.tenable.com/security/tns-2016-20"
    ],
    "refmap": {
        "bid": [
            "91528"
        ],
        "confirm": [
            "https://bugzilla.redhat.com/show_bug.cgi?id=1344251",
            "https://sourceforge.net/p/expat/code_git/ci/f0bec73b018caa07d3e75ec8dd967f3785d71bde",
            "https://www.tenable.com/security/tns-2016-20"
        ],
        "gentoo": [
            "GLSA-201701-21"
        ],
        "ubuntu": [
            "USN-3013-1"
        ]
    },
    "summary": "The overflow protection in Expat is removed by compilers with certain optimization settings, which allows remote attackers to cause a denial of service (crash) or possibly execute arbitrary code via crafted XML data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-1283 and CVE-2015-2716.",
    "vulnerable_configuration": [
        {
            "id": "cpe:2.3:a:libexpat:expat:2.1.1",
            "title": "libexpat Expat 2.1.1"
        },
        {
            "id": "cpe:2.3:o:canonical:ubuntu_linux:12.04:-:-:-:lts",
            "title": "Canonical Ubuntu Linux 12.04 LTS"
        }
    ],
    "vulnerable_configuration_cpe_2_2": [
        "cpe:/a:libexpat:expat:2.1.1",
        "cpe:/o:canonical:ubuntu_linux:12.04::~~lts~~~"
    ]
}